{"version":3,"sources":["components/ColumnFilter.js","components/columns.js","components/SortingTable.js","App.js","reportWebVitals.js","index.js"],"names":["ColumnFilter","column","filterValue","setFilter","value","onChange","e","target","COLUMNS","Header","accessor","Filter","SortingTable","columns","useMemo","data","MOCK_DATA","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qQAEaA,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBC,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,UACrB,OACI,2CACY,IACR,uBAAOC,MAAOF,GAAe,GAAIG,SAAU,SAACC,GAAD,OAAOH,EAAUG,EAAEC,OAAOH,cCLpEI,EAAU,CACnB,CACIC,OAAQ,KACRC,SAAU,KACVC,OAAQX,GAEZ,CACIS,OAAQ,OACRC,SAAU,OACVC,OAAQX,GAEZ,CACIS,OAAQ,QACRC,SAAU,QACVC,OAAQX,GAEZ,CACIS,OAAQ,SACRC,SAAU,SACVC,OAAQX,GAEZ,CACIS,OAAQ,MACRC,SAAU,MACVC,OAAQX,ICpBHY,G,MAAe,WACxB,IAAMC,EAAUC,mBAAQ,kBAAKN,IAAS,IAChCO,EAAOD,mBAAQ,kBAAME,IAAW,IAFR,EAUrBC,mBAAS,CACPJ,UACAE,QAEHG,aACAC,aAVDC,EALuB,EAKvBA,cACAC,EANuB,EAMvBA,kBACAC,EAPuB,EAOvBA,aACAC,EARuB,EAQvBA,KACAC,EATuB,EASvBA,WAQP,OACI,kDAAWJ,KAAX,cACI,gCACKE,EAAaG,KAAI,SAACC,GAAD,OAClB,8CAAQA,EAAYC,uBAApB,aACKD,EAAYE,QAAQH,KAAK,SAAAxB,GAAM,OAC3B,+CAAQA,EAAO4B,eAAe5B,EAAO6B,yBAArC,cAA+D7B,EAAO8B,OAAO,UAE7E,+BACK9B,EAAO+B,SAAY/B,EAAOgC,aAAe,gBAAQ,gBAAS,KAE/D,8BAAMhC,EAAOiC,UAAYjC,EAAO8B,OAAO,UAAY,sBAUhE,iDAAWV,KAAX,aACKE,EAAKE,KAAK,SAAAU,GAEP,OADAX,EAAWW,GAEP,8CAAQA,EAAIC,eAAZ,aACKD,EAAIE,MAAMZ,KAAI,SAACa,GACZ,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKP,OAAO,6BCrClES,MARf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASpB,OACP,cAAC,IAAMqB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.fc05fd8f.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ColumnFilter = ({ column }) => {\n    const { filterValue, setFilter } = column\n    return (\n        <span>\n            Search:{' '}\n            <input value={filterValue || ''} onChange={(e) => setFilter(e.target.value)} />\n        </span>\n    )\n}","import { ColumnFilter } from \"./ColumnFilter\";\n\nexport const COLUMNS = [\n    {\n        Header: 'Id',\n        accessor: 'id',\n        Filter: ColumnFilter,\n    },\n    {\n        Header: 'Name',\n        accessor: 'name',\n        Filter: ColumnFilter,\n    },\n    {\n        Header: 'Email',\n        accessor: 'email',\n        Filter: ColumnFilter,\n    },\n    {\n        Header: 'Gender',\n        accessor: 'gender',\n        Filter: ColumnFilter,\n    },\n    {\n        Header: 'Age',\n        accessor: 'age',\n        Filter: ColumnFilter,\n    }\n\n]","import React, { useMemo } from 'react'\nimport { useTable, useSortBy, useFilters } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS } from './columns'\nimport './table.css'\n\nexport const SortingTable = () => {\n    const columns = useMemo(()=> COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n       const { \n           getTableProps, \n           getTableBodyProps, \n           headerGroups, \n           rows, \n           prepareRow,\n         } = useTable({\n               columns,\n               data\n            },\n            useFilters,\n            useSortBy)\n    \n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map((column => (\n                         <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\n                         \n                         <span>\n                             {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : \"\"}\n                         </span>\n                         <div>{column.canFilter ? column.render('Filter') : null}</div>\n                         </th>\n                     )))\n                    }\n                </tr>\n                    \n                ))\n                }\n            </thead>\n\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map((cell) => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>  \n                    )\n                }))\n            }\n            </tbody>\n        </table>\n    )\n}\n                \nexport default SortingTable","import React from 'react';\n\nimport './App.css'\nimport { SortingTable } from './components/SortingTable'\n\nfunction App() {\n    return (\n        <div className='App'>\n            <SortingTable />\n        </div>\n    )\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();  \n"],"sourceRoot":""}